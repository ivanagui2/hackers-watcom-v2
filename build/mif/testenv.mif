################################################################################################################
#
# Setup OW test environment
#

#
# configuration flags (default: flag symbol not defined)
#
# no_continue = yes     -- continue in the face of errors
# use_dll = yes         -- use !loaddll

#
# configuration values:
#
# targ_env_386 = wnt386/d4g386/cw386/os2386/linux386 (depends on current OS)
# targ_env_i86 = os2i86/dosi86 (depends on current OS)
# targ_env_axp = ntaxp (depends on current OS)
# targ_env_ppc = linuxppc/ntppc (depends on current OS)
# targ_env_mps = linuxmips (depends on current OS)
#
# nb: above directories can have extensions:
#   .    - Intel 386 hosted compiler
#   .axp - Digital AXP hosted compiler
#   ( more to be defined )
#
# was_386 = wasm
# was_i86 = wasm
# was_axp = wasmaxp
# was_ppc = wasmppc
# was_mps = wasmmps
#
# wcc_386 = wcc386
# wcc_i86 = wcc
# wcc_axp = wccaxp
# wcc_ppc = wccppc
# wcc_mps = wccmps
#
# wcc_dll_386 = wcc386.dll
# wcc_dll_i86 = wcc.dll
# wcc_dll_axp = wccaxp.dll
# wcc_dll_ppc = wccppc.dll
# wcc_dll_mps = wccmps.dll
#
# wpp_386 = wpp386
# wpp_i86 = wpp
# wpp_axp = wppaxp
# wpp_ppc = wppppc
# wpp_mps = wppmps
#
# wpp_dll_i86 = wppdi86.dll
# wpp_dll_386 = wppd386.dll
# wpp_dll_axp = wppdaxp.dll
# wpp_dll_ppc = wppdppc.dll
# wpp_dll_mps = wppdmps.dll
#
# wfc_386 = wfc386
# wfc_i86 = wfc
# wfc_axp = wfcaxp
#
# wfc_dll_i86 = wfcdi86.dll
# wfc_dll_386 = wfcd386.dll
# wfc_dll_axp = wfcdaxp.dll
#
# arch = 386/axp/ppc/mps (depends on current hardware)
#
# linker = wlink
#
# uncomment below if you want to see more 
# !define noisy 1
#

watcom_root = $(%WATCOM)

!ifdef %BUILDTEST
buildtest = 1
!endif
!ifdef buildtest
old_path=$+$(%PATH)$-
!ifdef __OS2__
path_rtdll = $(%OWSRCDIR)\clib\rtdll\os2.386\mf_r;$(%OWSRCDIR)\clib\rtdll\os2.386\mf_s;&
$(%OWSRCDIR)\cpplib\rtdll\os2.386\mf_r;$(%OWSRCDIR)\cpplib\rtdll\os2.386\mf_s;&
$(%OWSRCDIR)\mathlib\rtdll\os2.386\mf_r;$(%OWSRCDIR)\mathlib\rtdll\os2.386\mf_s;&
$(%OWSRCDIR)\mathlib\rtdll\os2.387\mf_r;$(%OWSRCDIR)\mathlib\rtdll\os2.387\mf_s
path_wcc = $(%OWSRCDIR)\cc\386\os2386.dll;$(%OWSRCDIR)\cc\i86\os2386.dll
path_wpp = $(%OWSRCDIR)\plusplus\386\os2386.dll;$(%OWSRCDIR)\plusplus\i86\os2386.dll
#path_wfc = $(%OWSRCDIR)\f77\wfc\386\os2386.dll;$(%OWSRCDIR)\f77\wfc\i86\os2386.dll
path_wlib = $(%OWSRCDIR)\nwlib\os2386.dll
path_wlink = $(%OWSRCDIR)\wl\os2386.dll
!else ifdef __NTAXP__
path_rtdll = $(%OWSRCDIR)\clib\rtdll\winnt.axp\mf_r;$(%OWSRCDIR)\clib\rtdll\winnt.axp\mf_s;&
$(%OWSRCDIR)\cpplib\rtdll\winnt.axp\mf_r;$(%OWSRCDIR)\cpplib\rtdll\winnt.axp\mf_s;&
$(%OWSRCDIR)\mathlib\rtdll\winnt.axp\mf_r;$(%OWSRCDIR)\mathlib\rtdll\winnt.axp\mf_s
path_wcc = $(%OWSRCDIR)\cc\axp\ntaxp.dll
path_wpp = $(%OWSRCDIR)\plusplus\axp\ntaxp.dll
#path_wfc = $(%OWSRCDIR)\f77\wfc\axp\ntaxp.dll
path_wlib = $(%OWSRCDIR)\nwlib\ntaxp.dll
path_wlink = $(%OWSRCDIR)\wl\ntaxp.dll
!else ifdef __NT386__
path_rtdll = $(%OWSRCDIR)\clib\rtdll\winnt.386\mf_r;$(%OWSRCDIR)\clib\rtdll\winnt.386\mf_s;&
$(%OWSRCDIR)\cpplib\rtdll\winnt.386\mf_r;$(%OWSRCDIR)\cpplib\rtdll\winnt.386\mf_s;&
$(%OWSRCDIR)\mathlib\rtdll\winnt.386\mf_r;$(%OWSRCDIR)\mathlib\rtdll\winnt.386\mf_s;&
$(%OWSRCDIR)\mathlib\rtdll\winnt.387\mf_r;$(%OWSRCDIR)\mathlib\rtdll\winnt.387\mf_s
path_wcc = $(%OWSRCDIR)\cc\386\nt386.dll;$(%OWSRCDIR)\cc\i86\nt386.dll
path_wpp = $(%OWSRCDIR)\plusplus\386\nt386.dll;$(%OWSRCDIR)\plusplus\i86\nt386.dll
#path_wfc = $(%OWSRCDIR)\f77\wfc\386\nt386.dll;$(%OWSRCDIR)\f77\wfc\i86\nt386.dll
path_wlib = $(%OWSRCDIR)\nwlib\nt386.dll
path_wlink = $(%OWSRCDIR)\wl\nt386.dll
!else ifdef __NTX64__
path_rtdll = $(%OWSRCDIR)\clib\rtdll\winnt.386\mf_r;$(%OWSRCDIR)\clib\rtdll\winnt.386\mf_s;&
$(%OWSRCDIR)\cpplib\rtdll\winnt.386\mf_r;$(%OWSRCDIR)\cpplib\rtdll\winnt.386\mf_s;&
$(%OWSRCDIR)\mathlib\rtdll\winnt.386\mf_r;$(%OWSRCDIR)\mathlib\rtdll\winnt.386\mf_s;&
$(%OWSRCDIR)\mathlib\rtdll\winnt.387\mf_r;$(%OWSRCDIR)\mathlib\rtdll\winnt.387\mf_s
path_wcc = $(%OWSRCDIR)\cc\386\ntx64.dll
path_wpp = $(%OWSRCDIR)\plusplus\386\ntx64.dll
#path_wfc = $(%OWSRCDIR)\f77\wfc\386\ntx64.dll
path_wlib = $(%OWSRCDIR)\nwlib\ntx64.dll
path_wlink = $(%OWSRCDIR)\wl\ntx64.dll
!endif
!endif

.EXTENSIONS:
.EXTENSIONS: .exp .exe .dis .dib .dum .ls1 .lst .obj .ser .mer .err .i .i0 .i1 .p .gc .gcp .c .cpp .for .asm .src .mif
.mif: ..;$(mif_path)

!ifndef no_continue
.CONTINUE
!else ifneq no_continue yes
.CONTINUE
!endif

.ERASE

.ERROR
    @%make set_old_path
    @%append $(%ERROR_FILE) $(%ERROR_MSG)

!ifdef buildtest
buildtest_prefix = b

!ifdef __OS2__
bld_incl    = -I"$(hdr_dir)/dos" -I"$(os2api_dir)/os2386/h"
!else ifdef __MSDOS__
bld_incl    = -I"$(hdr_dir)/dos"
!else ifdef __NT__
bld_incl    = -I"$(hdr_dir)/dos" -I"$(w32api_dir)/nt"
!else ifdef __LINUX__
bld_incl    = -I"$(hdr_dir)/linux"
!endif
!endif

!ifdef __OS2__
bld_sys     = os2v2
bld_cl      = $(buildtest_prefix)wcl386 -zq -bt=os2
bld_cl_opts = -fpc -ox -w8 -fe=$^@ $(bld_incl) -I"$(watcom_dir)/h"
!else ifdef __MSDOS__
bld_sys     = dos4g
bld_cl      = $(buildtest_prefix)wcl386 -zq -bt=dos
bld_cl_opts = -fpc -ox -w8 -fe=$^@ $(bld_incl) -I"$(watcom_dir)/h"
!else ifdef __NTAXP__
bld_sys     = ntaxp
bld_cl      = $(buildtest_prefix)wclaxp -zq -bt=nt
bld_cl_opts = -fpc -ox -w8 -fe=$^@ $(bld_incl) -I"$(watcom_dir)/h"
!else ifdef __NT386__
bld_sys     = nt
bld_cl      = $(buildtest_prefix)wcl386 -zq -bt=nt
bld_cl_opts = -fpc -ox -w8 -fe=$^@ $(bld_incl) -I"$(watcom_dir)/h"
!else ifdef __NTX64__
bld_sys     = nt
bld_cl      = $(buildtest_prefix)wcl386 -zq -bt=nt
bld_cl_opts = -fpc -ox -w8 -fe=$^@ $(bld_incl) -I"$(watcom_dir)/h"
!else ifdef __LINUXPPC__
bld_sys     = linuxppc
bld_cl      = $(buildtest_prefix)wclppc -zq -bt=linux
bld_cl_opts = -fpc -ox -w8 -fo=.obj -fe=$^@ $(bld_incl) -I"$(watcom_dir)/h"
!else ifdef __LINUXMIPS__
bld_sys     = linuxmips
bld_cl      = $(buildtest_prefix)wclmps -zq -bt=linux
bld_cl_opts = -fpc -ox -w8 -fo=.obj -fe=$^@ $(bld_incl) -I"$(watcom_dir)/h"
!else ifdef __LINUX386__
bld_sys     = linux
bld_cl      = $(buildtest_prefix)wcl386 -zq -bt=linux
bld_cl_opts = -fpc -ox -w8 -fo=.obj -fe=$^@ $(bld_incl) -I"$(watcom_dir)/h"
!else ifdef __LINUXX64__
bld_sys     = linux
bld_cl      = $(buildtest_prefix)wcl386 -zq -bt=linux
bld_cl_opts = -fpc -ox -w8 -fo=.obj -fe=$^@ $(bld_incl) -I"$(watcom_dir)/h"
!endif

!ifdef wasmtest_name
bld_extra_defines = -DWASM
!else ifdef ftest_name
bld_extra_defines = -DF77
!else ifeq ctest_name inline
bld_extra_defines = -DINLINETEST
!else ifeq plustest_name inline
bld_extra_defines = -DINLINETEST
!endif

#
# architectures -- 386, i86, axp, ppc, mps
#
!ifndef arch
!  ifdef wasmtest_name
!    ifdef %WASMTEST_ARCH
!      define arch $+$(%PLUSTEST_ARCH)$-
!    endif
!  else ifdef ctest_name
!    ifdef %PLUSTEST_ARCH
!      define arch $+$(%PLUSTEST_ARCH)$-
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_ARCH
!      define arch $+$(%FTEST_ARCH)$-
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_ARCH
!      define arch $+$(%PLUSTEST_ARCH)$-
!    endif
!  endif
!endif
!ifndef arch
!  ifdef __NTAXP__
!    define arch axp
!  else ifdef __NT386__
!    define arch 386
!  else ifdef __NTX64__
!    define arch 386
!  else ifdef __LINUXPPC__
!    define arch ppc
!  else ifdef __LINUXMIPS__
!    define arch mps
!  else ifdef __LINUX386__
!    define arch 386
!  else ifdef __LINUXX64__
!    define arch 386
!  else
!    define arch 386
!  endif
!endif

!ifndef use_dll
!  ifdef wasmtest_name
!    ifdef %WASMTEST_USE_DLL
!      define use_dll $+$(%WASMTEST_USE_DLL)$-
!    endif
!  else ifdef ctest_name
!    ifdef %CTEST_USE_DLL
!      define use_dll $+$(%CTEST_USE_DLL)$-
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_USE_DLL
!      define use_dll $+$(%FTEST_USE_DLL)$-
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_USE_DLL
!      define use_dll $+$(%PLUSTEST_USE_DLL)$-
!    endif
!  endif
!endif
!ifndef __LOADDLL__
# this feature isn't supported
!  undef use_dll
!endif

!ifndef log_file
!  ifdef wasmtest_name
!    ifdef %WASMTEST_LOG_FILE
!      define log_file $+$(%WASMTEST_LOG_FILE)$-
!    else ifdef %WASMTEST_NAME
!      define log_file $(wasmtest_dir)/$+$(%WASMTEST_NAME)$-.log
!    else
!      define log_file $(wasmtest_dir)/$(wasmtest_name).log
!    endif
!  else ifdef ctest_name
!    ifdef %CTEST_LOG_FILE
!      define log_file $+$(%CTEST_LOG_FILE)$-
!    else ifdef %CTEST_NAME
!      define log_file $(ctest_dir)/$+$(%CTEST_NAME)$-.log
!    else
!      define log_file $(ctest_dir)/$(ctest_name).log
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_LOG_FILE
!      define log_file $+$(%FTEST_LOG_FILE)$-
!    else ifdef %FTEST_NAME
!      define log_file $(ftest_dir)/$+$(%FTEST_NAME)$-.log
!    else
!      define log_file $(ftest_dir)/$(ftest_name).log
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_LOG_FILE
!      define log_file $+$(%PLUSTEST_LOG_FILE)$-
!    else ifdef %PLUSTEST_NAME
!      define log_file $(plustest_dir)/$+$(%PLUSTEST_NAME)$-.log
!    else
!      define log_file $(plustest_dir)/$(plustest_name).log
!    endif
!  else ifdef mathtest_name
!    ifdef %MATHTEST_LOG_FILE
!      define log_file $+$(%MATHTEST_LOG_FILE)$-
!    else ifdef %PLUSTEST_NAME
!      define log_file $(mathtest_dir)/$+$(%MATHTEST_NAME)$-.log
!    else
!      define log_file $(mathtest_dir)/$(mathtest_name).log
!    endif
!  endif
!endif

!ifndef targ_env_386
!  ifdef wasmtest_name
!    ifdef %WASMTEST_TARG_ENV_386
!      define targ_env_386 $(%WASMTEST_TARG_ENV_386)
!    endif
!  else ifdef ctest_name
!    ifdef %CTEST_TARG_ENV_386
!      define targ_env_386 $(%CTEST_TARG_ENV_386)
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_TARG_ENV_386
!      define targ_env_386 $(%FTEST_TARG_ENV_386)
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_TARG_ENV_386
!      define targ_env_386 $(%PLUSTEST_TARG_ENV_386)
!    endif
!  else ifdef mathtest_name
!    ifdef %MATHTEST_TARG_ENV_386
!      define targ_env_386 $(%MATHTEST_TARG_ENV_386)
!    endif
!  endif
!endif
!ifndef targ_env_386
!  ifdef __DOS__
!    define targ_env_386 d4g386
#!    define targ_env_386 cw386
!  else ifdef __OS2__
!    define targ_env_386 os2386
!  else ifdef __LINUX386__
!    define targ_env_386 lnx386
!  else ifdef __LINUXX64__
!    define targ_env_386 lnx386
!  else ifdef __NT386__
!    define targ_env_386 wnt386
!  else ifdef __NTX64__
!    define targ_env_386 wnt386
!  endif
!endif

!ifndef targ_env_i86
!  ifdef wasmtest_name
!    ifdef %WASMTEST_TARG_ENV_I86
!      define targ_env_i86 $(%WASMTEST_TARG_ENV_I86)
!    endif
!  else ifdef ctest_name
!    ifdef %CTEST_TARG_ENV_I86
!      define targ_env_i86 $(%CTEST_TARG_ENV_I86)
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_TARG_ENV_I86
!      define targ_env_i86 $(%FTEST_TARG_ENV_I86)
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_TARG_ENV_I86
!      define targ_env_i86 $(%PLUSTEST_TARG_ENV_I86)
!    endif
!  else ifdef mathtest_name
!    ifdef %MATHTEST_TARG_ENV_I86
!      define targ_env_i86 $(%MATHTEST_TARG_ENV_I86)
!    endif
!  endif
!endif
!ifndef targ_env_i86
!  ifdef __DOS__
!    define targ_env_i86 dosi86
!  else ifdef __OS2__
!    define targ_env_i86 os2i86
!  else ifdef __NT__
!    define targ_env_i86 wnti86
!  endif
!endif

!ifndef targ_env_axp
!  ifdef wasmtest_name
!    ifdef %WASMTEST_TARG_ENV_AXP
!      define targ_env_axp $(%WASMTEST_TARG_ENV_AXP)
!    endif
!  else ifdef ctest_name
!    ifdef %CTEST_TARG_ENV_AXP
!      define targ_env_axp $(%CTEST_TARG_ENV_AXP)
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_TARG_ENV_AXP
!      define targ_env_axp $(%FTEST_TARG_ENV_AXP)
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_TARG_ENV_AXP
!      define targ_env_axp $(%PLUSTEST_TARG_ENV_AXP)
!    endif
!  else ifdef mathtest_name
!    ifdef %MATHTEST_TARG_ENV_AXP
!      define targ_env_axp $(%MATHTEST_TARG_ENV_AXP)
!    endif
!  endif
!endif
!ifndef targ_env_axp
!  ifdef __DOS__
!    define targ_env_axp dosaxp
!  else ifdef __OS2__
!    define targ_env_axp os2axp
!  else ifdef __NT__
!    define targ_env_axp wntaxp
!  endif
!endif

!ifndef targ_env_ppc
!  ifdef wasmtest_name
!    ifdef %WASMTEST_TARG_ENV_PPC
!      define targ_env_ppc $(%WASMTEST_TARG_ENV_PPC)
!    endif
!  else ifdef ctest_name
!    ifdef %CTEST_TARG_ENV_PPC
!      define targ_env_ppc $(%CTEST_TARG_ENV_PPC)
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_TARG_ENV_PPC
!      define targ_env_ppc $(%FTEST_TARG_ENV_PPC)
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_TARG_ENV_PPC
!      define targ_env_ppc $(%PLUSTEST_TARG_ENV_PPC)
!    endif
!  else ifdef mathtest_name
!    ifdef %MATHTEST_TARG_ENV_PPC
!      define targ_env_ppc $(%MATHTEST_TARG_ENV_PPC)
!    endif
!  endif
!endif
!ifndef targ_env_ppc
!  ifdef __LINUX__
!    define targ_env_ppc lnxppc
!  endif
!endif


!ifndef targ_env_mps
!  ifdef wasmtest_name
!    ifdef %WASMTEST_TARG_ENV_MPS
!      define targ_env_mps $(%WASMTEST_TARG_ENV_MPS)
!    endif
!  else ifdef ctest_name
!    ifdef %CTEST_TARG_ENV_MPS
!      define targ_env_mps $(%CTEST_TARG_ENV_MPS)
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_TARG_ENV_MPS
!      define targ_env_mps $(%FTEST_TARG_ENV_MPS)
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_TARG_ENV_MPS
!      define targ_env_mps $(%PLUSTEST_TARG_ENV_MPS)
!    endif
!  else ifdef mathtest_name
!    ifdef %MATHTEST_TARG_ENV_MPS
!      define targ_env_mps $(%MATHTEST_TARG_ENV_MPS)
!    endif
!  endif
!endif
!ifndef targ_env_mps
!  ifdef __LINUX__
!    define targ_env_mps lnxmps
!  endif
!endif

!ifndef comp_wasm_386
!  ifdef buildtest
#    build version of assembler for 386
!    ifdef __DOS__
!      define comp_wasm_386 $(%OWSRCDIR)\wasm\dos386\wasm
!    else ifdef __OS2__
!      define comp_wasm_386 $(%OWSRCDIR)\wasm\os2386\wasm
!    else ifdef __LINUX386__
!      define comp_wasm_386 $(%OWSRCDIR)/wasm/linux386/wasm.exe
!    else ifdef __LINUXX64__
!      define comp_wasm_386 $(%OWSRCDIR)/wasm/linuxx64/wasm.exe
!    else ifdef __NT386__
!      define comp_wasm_386 $(%OWSRCDIR)\wasm\nt386\wasm
!    else ifdef __NTX64__
!      define comp_wasm_386 $(%OWSRCDIR)\wasm\ntx64\wasm
!    endif
!  else ifdef %WASMTEST_WASM_386
!    define comp_wasm_386 $(%WASMTEST_WASM_386)
!  else
!    define comp_wasm_386 wasm
!  endif
!endif

!ifndef comp_wasm_i86
!  ifdef buildtest
#    build version of assembler for i86
!    ifdef __DOS__
!      define comp_wasm_i86 $(%OWSRCDIR)\wasm\dos386\wasm
!    else ifdef __OS2__
!      define comp_wasm_i86 $(%OWSRCDIR)\wasm\os2386\wasm
!    else ifdef __NT386__
!      define comp_wasm_i86 $(%OWSRCDIR)\wasm\dosi86\wasm
!    endif
!  else ifdef %WASMTEST_WASM_I86
!    define comp_wasm_i86 $(%WASMTEST_WASM_I86)
!  else
!    define comp_wasm_i86 wasmr
!  endif
!endif

!ifndef comp_wasm_axp
!  ifdef buildtest
#    build version of assembler for axp
!    ifdef __NTAXP__
!      define comp_wasm_axp $(%OWSRCDIR)\as\axp\ntaxp\wasaxp
!    endif
!  else ifdef %WASMTEST_WASM_AXP
!    define comp_wasm_axp $(%WASMTEST_WASM_AXP)
!  else
!    define comp_wasm_axp wasmaxp
!  endif
!endif

!ifndef comp_wasm_ppc
!  ifdef buildtest
#    build version of assembler for ppc
!    ifdef __LINUXPPC__
!      define comp_wasm_ppc $(%OWSRCDIR)/as/ppc/linuxppc/wasppc.exe
!    endif
!  else ifdef %WASMTEST_WASM_PPC
!    define comp_wasm_ppc $(%WASMTEST_WASM_PPC)
!  else
!    define comp_wasm_ppc wasmppc
!  endif
!endif

!ifndef comp_wasm_mps
!  ifdef buildtest
#    build version of assembler for mps
!    ifdef __LINUXMPS__
!      define comp_wasm_mps $(%OWSRCDIR)/as/mps/linuxmps/wasmps.exe
!    endif
!  else ifdef %WASMTEST_WASM_MPS
!    define comp_wasm_mps $(%WASMTEST_WASM_MPS)
!  else
!    define comp_wasm_mps wasmmps
!  endif
!endif

!ifndef comp_wcc_386
!  ifdef buildtest
#    build version of C compiler for 386
!    ifdef __DOS__
!      define comp_wcc_386 $(%OWSRCDIR)\cc\386\dos386\wcc386
!    else ifdef __OS2__
!      define comp_wcc_386 $(%OWSRCDIR)\cc\386\os2386.dll\wcc386
!    else ifdef __LINUX386__
!      define comp_wcc_386 $(%OWSRCDIR)/cc/386/linux386/wcc386.exe
!    else ifdef __LINUXX64__
!      define comp_wcc_386 $(%OWSRCDIR)/cc/386/linuxx64/wcc386.exe
!    else ifdef __NT386__
!      define comp_wcc_386 $(%OWSRCDIR)\cc\386\nt386.dll\wcc386
!    else ifdef __NTX64__
!      define comp_wcc_386 $(%OWSRCDIR)\cc\386\ntx64.dll\wcc386
!    endif
!  else ifdef %CTEST_WCC_386
!    define comp_wcc_386 $(%CTEST_WCC_386)
!  else
!    define comp_wcc_386 wcc386
!  endif
!endif

!ifndef comp_wcc_i86
!  ifdef buildtest
#    build version of C compiler for i86
!    ifdef __DOS__
!      define comp_wcc_i86 $(%OWSRCDIR)\cc\i86\dos386\wcc
!    else ifdef __OS2__
!      define comp_wcc_i86 $(%OWSRCDIR)\cc\i86\os2386.dll\wcc
!    else ifdef __NT386__
!      define comp_wcc_i86 $(%OWSRCDIR)\cc\i86\nt386.dll\wcc
!    endif
!  else ifdef %CTEST_WCC_I86
!    define comp_wcc_i86 $(%CTEST_WCC_I86)
!  else
!    define comp_wcc_i86 wcc
!  endif
!endif

!ifndef comp_wcc_axp
!  ifdef buildtest
#    build version of C compiler for axp
!    ifdef __OS2__
!      define comp_wcc_axp $(%OWSRCDIR)\cc\axp\os2axp\wccaxp
!    else ifdef __NTAXP__
!      define comp_wcc_axp $(%OWSRCDIR)\cc\axp\ntaxp.dll\wccaxp
!    endif
!  else ifdef %CTEST_WCC_AXP
!    define comp_wcc_axp $(%CTEST_WCC_AXP)
!  else
!    define comp_wcc_axp wccaxp
!  endif
!endif

!ifndef comp_wcc_ppc
!  ifdef buildtest
#    build version of C compiler for ppc
!    ifdef __LINUXPPC__
!      define comp_wcc_ppc $(%OWSRCDIR)/cc/ppc/linuxppc/wccppc.exe
!    endif
!  else ifdef %CTEST_WCC_PPC
!    define comp_wcc_ppc $(%CTEST_WCC_PPC)
!  else
!    define comp_wcc_ppc wccppc
!  endif
!endif

!ifndef comp_wcc_mps
!  ifdef buildtest
#    build version of C compiler for mps
!    ifdef __LINUXMPS__
!      define comp_wcc_mps $(%OWSRCDIR)/cc/mps/linuxmps/wccmps.exe
!    endif
!  else ifdef %CTEST_WCC_MPS
!    define comp_wcc_mps $(%CTEST_WCC_MPS)
!  else
!    define comp_wcc_mps wccmps
!  endif
!endif

!ifndef dll_wcc_386
!  ifdef buildtest
!    ifdef __OS2__
!      define dll_wcc_386 $(%OWSRCDIR)\cc\386\os2386.dll\wccd386.dll
!    else ifdef __NT386__
!      define dll_wcc_386 $(%OWSRCDIR)\cc\386\nt386.dll\wccd386.dll
!    else ifdef __NTX64__
!      define dll_wcc_386 $(%OWSRCDIR)\cc\386\ntx64.dll\wccd386.dll
!    endif
!  else ifdef %CTEST_DLL_386
!    define dll_wcc_386 $(%CTEST_DLL_386)
!  else
!    define dll_wcc_386 wccd386.dll
!  endif
!endif

!ifndef dll_wcc_i86
!  ifdef buildtest
!    ifdef __OS2__
!      define dll_wcc_i86 $(%OWSRCDIR)\cc\i86\os2386.dll\wccd.dll
!    else ifdef __NT386__
!      define dll_wcc_i86 $(%OWSRCDIR)\cc\i86\nt386.dll\wccd.dll
!    endif
!  else ifdef %CTEST_DLL_I86
!    define dll_wcc_i86 $(%CTEST_DLL_I86)
!  else
!    define dll_wcc_i86 wccd.dll
!  endif
!endif

!ifndef dll_wcc_axp
!  ifdef buildtest
!    ifdef __OS2__
!      define dll_wcc_axp $(%OWSRCDIR)\cc\axp\os2axp.dll\wccdaxp.dll
!    else ifdef __NTAXP__
!      define dll_wcc_axp $(%OWSRCDIR)\cc\axp\ntaxp.dll\wccdaxp.dll
!    endif
!  else ifdef %CTEST_DLL_AXP
!    define dll_wcc_axp $(%CTEST_DLL_AXP)
!  else
!    define dll_wcc_axp wccdaxp.dll
!  endif
!endif

!ifndef comp_wpp_386
!  ifdef buildtest
#    build version of C++ compiler for 386
!    ifdef __DOS__
!      define comp_wpp_386 $(%OWSRCDIR)\plusplus\386\dos386\wpp386
!    else ifdef __OS2__
!      define comp_wpp_386 $(%OWSRCDIR)\plusplus\386\os2386.dll\wpp386
!    else ifdef __LINUX386__
!      define comp_wpp_386 $(%OWSRCDIR)/plusplus/386/linux386/wpp386.exe
!    else ifdef __LINUXX64__
!      define comp_wpp_386 $(%OWSRCDIR)/plusplus/386/linuxx64/wpp386.exe
!    else ifdef __NT386__
!      define comp_wpp_386 $(%OWSRCDIR)\plusplus\386\nt386.dll\wpp386
!    else ifdef __NTX64__
!      define comp_wpp_386 $(%OWSRCDIR)\plusplus\386\ntx64.dll\wpp386
!    endif
!  else ifdef %PLUSTEST_WPP_386
!    define comp_wpp_386 $(%PLUSTEST_WPP_386)
!  else
!    define comp_wpp_386 wpp386
!  endif
!endif

!ifndef comp_wpp_i86
!  ifdef buildtest
#    build version of C++ compiler for i86
!    ifdef __DOS__
!      define comp_wpp_i86 $(%OWSRCDIR)\plusplus\i86\dos386\wpp
!    else ifdef __OS2__
!      define comp_wpp_i86 $(%OWSRCDIR)\plusplus\i86\os2386.dll\wpp
!    else ifdef __NT386__
!      define comp_wpp_i86 $(%OWSRCDIR)\plusplus\i86\nt386.dll\wpp
!    endif
!  else ifdef %PLUSTEST_WPP_I86
!    define comp_wpp_i86 $(%PLUSTEST_WPP_I86)
!  else
!    define comp_wpp_i86 wpp
!  endif
!endif

!ifndef comp_wpp_axp
!  ifdef buildtest
#    build version of C++ compiler for axp
!    ifdef __OS2__
!      define comp_wpp_axp $(%OWSRCDIR)\plusplus\axp\os2axp\wppaxp
!    else ifdef __NTAXP__
!      define comp_wpp_axp $(%OWSRCDIR)\plusplus\axp\ntaxp.dll\wppaxp
!    endif
!  else ifdef %PLUSTEST_WPP_AXP
!    define comp_wpp_axp $(%PLUSTEST_WPP_AXP)
!  else
!    define comp_wpp_axp wppaxp
!  endif
!endif

!ifndef comp_wpp_ppc
!  ifdef buildtest
#    build version of C++ compiler for ppc
!    ifdef __LINUXPPC__
!      define comp_wpp_ppc $(%OWSRCDIR)/plusplus/ppc/linuxppc/wppppc.exe
!    endif
!  else ifdef %PLUSTEST_WPP_PPC
!    define comp_wpp_ppc $(%PLUSTEST_WPP_PPC)
!  else
!    define comp_wpp_ppc wppppc
!  endif
!endif

!ifndef comp_wpp_mps
!  ifdef buildtest
#    build version of C++ compiler for mps
!    ifdef __LINUXMPS__
!      define comp_wpp_mps $(%OWSRCDIR)/plusplus/mps/linuxmps/wppmps.exe
!    endif
!  else ifdef %PLUSTEST_WPP_MPS
!    define comp_wpp_mps $(%PLUSTEST_WPP_MPS)
!  else
!    define comp_wpp_mps wppmps
!  endif
!endif

!ifndef dll_wpp_386
!  ifdef buildtest
!    ifdef __OS2__
!      define dll_wpp_386 $(%OWSRCDIR)\plusplus\386\os2386.dll\wppd386.dll
!    else ifdef __NT386__
!      define dll_wpp_386 $(%OWSRCDIR)\plusplus\386\nt386.dll\wppd386.dll
!    else ifdef __NTX64__
!      define dll_wpp_386 $(%OWSRCDIR)\plusplus\386\ntx64.dll\wppd386.dll
!    endif
!  else ifdef %PLUSTEST_DLL_386
!    define dll_wpp_386 $(%PLUSTEST_DLL_386)
!  else
!    define dll_wpp_386 wppd386.dll
!  endif
!endif

!ifndef dll_wpp_i86
!  ifdef buildtest
!    ifdef __OS2__
!      define dll_wpp_i86 $(%OWSRCDIR)\plusplus\i86\os2386.dll\wppdi86.dll
!    else ifdef __NT386__
!      define dll_wpp_i86 $(%OWSRCDIR)\plusplus\i86\nt386.dll\wppdi86.dll
!    endif
!  else ifdef %PLUSTEST_DLL_I86
!    define dll_wpp_i86 $(%PLUSTEST_DLL_I86)
!  else
!    define dll_wpp_i86 wppdi86.dll
!  endif
!endif

!ifndef dll_wpp_axp
!  ifdef buildtest
!    ifdef __OS2__
!      define dll_wpp_axp $(%OWSRCDIR)\plusplus\axp\os2axp.dll\wppdaxp.dll
!    else ifdef __NTAXP__
!      define dll_wpp_axp $(%OWSRCDIR)\plusplus\axp\os2axp.dll\wppdaxp.dll
!    endif
!  else ifdef %PLUSTEST_DLL_AXP
!    define dll_wpp_axp $(%PLUSTEST_DLL_AXP)
!  else
!    define dll_wpp_axp wppdaxp.dll
!  endif
!endif

!ifndef comp_wfc_386
!  ifdef buildtest
#    build version of F77 compiler for 386
!    ifdef __DOS__
!      define comp_wfc_386 $(%OWSRCDIR)\f77\wfc\386\dos386\wfc386
!    else ifdef __OS2__
!      define comp_wfc_386 $(%OWSRCDIR)\f77\wfc\386\os2386\wfc386
!    else ifdef __LINUX386__
!      define comp_wfc_386 $(%OWSRCDIR)/f77/wfc/386/linux386/wfc386.exe
!    else ifdef __LINUXX64__
!      define comp_wfc_386 $(%OWSRCDIR)/f77/wfc/386/linuxx64/wfc386.exe
!    else ifdef __NT386__
!      define comp_wfc_386 $(%OWSRCDIR)\f77\wfc\386\nt386\wfc386
!    else ifdef __NTX64__
!      define comp_wfc_386 $(%OWSRCDIR)\f77\wfc\386\ntx64\wfc386
!    endif
!  else ifdef %FTEST_WFC_386
!    define comp_wfc_386 $(%FTEST_WFC_386)
!  else
!    define comp_wfc_386 wfc386
!  endif
!endif

!ifndef comp_wfc_i86
!  ifdef buildtest
#    build version of F77 compiler for i86
!    ifdef __DOS__
!      define comp_wfc_i86 $(%OWSRCDIR)\f77\wfc\i86\dos386\wfc
!    else ifdef __OS2__
!      define comp_wfc_i86 $(%OWSRCDIR)\f77\wfc\i86\os2386\wfc
!    else ifdef __NT386__
!      define comp_wfc_i86 $(%OWSRCDIR)\f77\wfc\i86\nt386\wfc
!    endif
!  else ifdef %FTEST_WFC_I86
!    define comp_wfc_i86 $(%FTEST_WFC_I86)
!  else
!    define comp_wfc_i86 wfc
!  endif
!endif

!ifndef comp_wfc_axp
!  ifdef buildtest
#    build version of F77 compiler for axp
!    ifdef __OS2__
!      define comp_wfc_axp $(%OWSRCDIR)\f77\wfc\axp\os2axp\wfcaxp
!    else ifdef __NTAXP__
!      define comp_wfc_axp $(%OWSRCDIR)\f77\wfc\axp\ntaxp\wfcaxp
!    endif
!  else ifdef %FTEST_WFC_AXP
!    define comp_wfc_axp $(%FTEST_WFC_AXP)
!  else
!    define comp_wfc_axp wfcaxp
!  endif
!endif

!ifndef dll_wfc_386
!  ifdef buildtest
!    ifdef __OS2__
!      define dll_wfc_386 $(%OWSRCDIR)\f77\wfc\386\os2386.dll\wfcd386.dll
!    else ifdef __NT386__
!      define dll_wfc_386 $(%OWSRCDIR)\f77\wfc\386\nt386.dll\wfcd386.dll
!    else ifdef __NTX64__
!      define dll_wfc_386 $(%OWSRCDIR)\f77\wfc\386\ntx64.dll\wfcd386.dll
!    endif
!  else ifdef %FTEST_DLL_386
!    define dll_wfc_386 $(%FTEST_DLL_386)
!  else
!    define dll_wfc_386 wfcd386.dll
!  endif
!endif

!ifndef dll_wfc_i86
!  ifdef buildtest
!    ifdef __OS2__
!      define dll_wfc_i86 $(%OWSRCDIR)\f77\wfc\i86\os2386.dll\wfcdi86.dll
!    else ifdef __NT386__
!      define dll_wfc_i86 $(%OWSRCDIR)\f77\wfc\i86\nt386.dll\wfcdi86.dll
!    else ifdef __NTX64__
!      define dll_wfc_i86 $(%OWSRCDIR)\f77\wfc\i86\ntx64.dll\wfcdi86.dll
!    endif
!  else ifdef %FTEST_DLL_I86
!    define dll_wfc_i86 $(%FTEST_DLL_I86)
!  else
!    define dll_wfc_i86 wfcdi86.dll
!  endif
!endif

!ifndef dll_wfc_axp
!  ifdef buildtest
!    ifdef __OS2__
!      define dll_wfc_axp $(%OWSRCDIR)\f77\wfc\axp\os2axp.dll\wfcdaxp.dll
!    else ifdef __NTAXP__
!      define dll_wfc_axp $(%OWSRCDIR)\f77\wfc\axp\ntaxp.dll\wfcdaxp.dll
!    endif
!  else ifdef %FTEST_DLL_AXP
!    define dll_wfc_axp $(%FTEST_DLL_AXP)
!  else
!    define dll_wfc_axp wfcdaxp.dll
!  endif
!endif

!undef dll_loaded

!ifdef use_dll
!  define dll_loaded
!  ifdef wasmtest_name
!  else ifdef ctest_name
!    loaddll $(comp_wcc_$(arch)) $(dll_wcc_$(arch))
!  else ifdef ftest_name
!    loaddll $(comp_wfc_$(arch)) $(dll_wfc_$(arch))
!  else ifdef plustest_name
!    loaddll $(comp_wpp_$(arch)) $(dll_wpp_$(arch))
!  else ifdef mathtest_name
!    loaddll $(comp_wcc_$(arch)) $(dll_wcc_$(arch))
!  endif
!endif

!ifndef linker
!  ifdef buildtest
!    ifdef __OS2__
!      define linker $(%OWSRCDIR)\wl\os2386.dll\wlink
!    else ifdef __MSDOS__
!      define linker $(%OWSRCDIR)\wl\dos386\wlink
!    else ifdef __NTAXP__
!      define linker $(%OWSRCDIR)\wl\ntaxp.dll\wlink
!    else ifdef __NT386__
!      define linker $(%OWSRCDIR)\wl\nt386.dll\wlink
!    else ifdef __NTX64__
!      define linker $(%OWSRCDIR)\wl\ntx64.dll\wlink
!    else ifdef __LINUXPPC__
!      define linker $(%OWSRCDIR)/wl/linuxppc/wlink.exe
!    else ifdef __LINUXMIPS__
!      define linker $(%OWSRCDIR)/wl/linuxmps/wlink.exe
!    else ifdef __LINUX386__
!      define linker $(%OWSRCDIR)/wl/linux386/wlink.exe
!    else ifdef __LINUXX64__
!      define linker $(%OWSRCDIR)/wl/linuxx64/wlink.exe
!    endif
!    ifdef use_dll
!      ifdef __OS2__
!        loaddll $(linker) $(path_wlink)\wlinkd.dll
!      else ifdef __NTAXP__
!        loaddll $(linker) $(path_wlink)\wlinkd.dll
!      else ifdef __NT386__
!        loaddll $(linker) $(path_wlink)\wlinkd.dll
!      else ifdef __NTX64__
!        loaddll $(linker) $(path_wlink)\wlinkd.dll
!      endif
!    endif
!  else ifdef wasmtest_name
!    ifdef %WASMTEST_LINKER
!      define linker $+$(%WASMTEST_LINKER)$-
!    endif
!  else ifdef ctest_name
!    ifdef %CTEST_LINKER
!      define linker $+$(%CTEST_LINKER)$-
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_LINKER
!      define linker $+$(%FTEST_LINKER)$-
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_LINKER
!      define linker $+$(%PLUSTEST_LINKER)$-
!    endif
!  else ifdef mathtest_name
!    ifdef %MATHTEST_LINKER
!      define linker $+$(%MATHTEST_LINKER)$-
!    endif
!  endif
!endif
!ifndef linker
!  define linker wlink
!  ifdef use_dll
!    loaddll $(linker) wlinkd.dll
!  endif
!endif

!ifdef buildtest
!  ifdef __OS2__
!    define wlib_any $(%OWSRCDIR)\nwlib\os2386.dll\wlib
!  else ifdef __MSDOS__
!    define wlib_any $(%OWSRCDIR)\nwlib\dos386\wlib
!  else ifdef __NTAXP__
!    define wlib_any $(%OWSRCDIR)\nwlib\ntaxp.dll\wlib
!  else ifdef __NT386__
!    define wlib_any $(%OWSRCDIR)\nwlib\nt386.dll\wlib
!  else ifdef __NTX64__
!    define wlib_any $(%OWSRCDIR)\nwlib\ntx64.dll\wlib
!  else ifdef __LINUXPPC__
!    define wlib_any $(%OWSRCDIR)/nwlib/linuxppc/wlib.exe
!  else ifdef __LINUXMIPS__
!    define wlib_any $(%OWSRCDIR)/nwlib/linuxmps/wlib.exe
!  else ifdef __LINUX386__
!    define wlib_any $(%OWSRCDIR)/nwlib/linux386/wlib.exe
!  else ifdef __LINUXX64__
!    define wlib_any $(%OWSRCDIR)/nwlib/linuxx64/wlib.exe
!  endif
!  ifdef use_dll
!    ifdef __OS2__
!      loaddll $(wlib_any) $(path_wlib)\wlibd.dll
!    else ifdef __NTAXP__
!      loaddll $(wlib_any) $(path_wlib)\wlibd.dll
!    else ifdef __NT386__
!      loaddll $(wlib_any) $(path_wlib)\wlibd.dll
!    else ifdef __NTX64__
!      loaddll $(wlib_any) $(path_wlib)\wlibd.dll
!    endif
!  endif
!else
wlib_any = wlib
!  ifdef use_dll
!    loaddll $(wlib_any) wlibd.dll
!  endif
!endif

#
# targ_ext      extension (e.g., exp ) - must have one for default rules to work
targ_ext_pls386 = exp
targ_ext_d4g386 = exe
targ_ext_cw386  = exe
targ_ext_tnt386 = exe
targ_ext_os2386 = exe
targ_ext_wnt386 = exe
targ_ext_lnx386 = exe
targ_ext_wnti86 = exe
targ_ext_dosi86 = exe
targ_ext_os2i86 = exe
targ_ext_wntaxp = exe
targ_ext_dosaxp = exe
targ_ext_os2axp = exe
targ_ext_lnxppc = exe
targ_ext_lnxmps = exe

exe = $(targ_ext_$(targ_env_$(arch)))

# targ_br
targ_br_pls386 =
targ_br_d4g386 =
targ_br_cw386  =
targ_br_tnt386 =
targ_br_os2386 = -br
targ_br_wnt386 = -br
targ_br_lnx386 =
targ_br_wnti86 =
targ_br_dosi86 =
targ_br_os2i86 = -br
targ_br_wntaxp = -br
targ_br_dosaxp =
targ_br_os2axp =
targ_br_lnxppc =
targ_br_lnxmps =

br_opt = $(targ_br_$(targ_env_$(arch)))

#
# targ_run      name of executable loader (e.g., run386)
targ_run_pls386 = run386
targ_run_d4g386 = dos4gw
targ_run_cw386  =
targ_run_tnt386 = tntrun
targ_run_os2386 =
targ_run_wnt386 =
targ_run_lnx386 =
targ_run_wnti86 =
targ_run_dosi86 =
targ_run_os2i86 =
targ_run_wntaxp =
targ_run_dosaxp =
targ_run_os2axp =
targ_run_lnxppc =
targ_run_lnxmps =

run = $(targ_run_$(targ_env_$(arch)))

!ifdef __UNIX__
exec_prefix = ./
!else
exec_prefix =
!endif

#
# targ_bld_was  build options (e.g., -bt=dos)
#
targ_bld_was_pls386 = -bt=dos
targ_bld_was_d4g386 = -bt=dos
targ_bld_was_cw386  = -bt=dos
targ_bld_was_tnt386 = -bt=nt
targ_bld_was_os2386 = -bt=os2
targ_bld_was_wnt386 = -bt=nt
targ_bld_was_lnx386 = -bt=linux
!ifdef __NT386__
targ_bld_was_wnti86 = -bt=dos
!else
targ_bld_was_wnti86 = -bt=nt
!endif
targ_bld_was_dosi86 = -bt=dos
targ_bld_was_os2i86 = -bt=os2
#
# these will be empty
#
targ_bld_was_wntaxp =
targ_bld_was_dosaxp =
targ_bld_was_os2axp =
targ_bld_was_lnxppc = -bt=linux
targ_bld_was_lnxmps = -bt=linux

#
# targ_bld_cxx  build options (e.g., -bt=dos)
#
!ifdef buildtest
incl_sys_dos    = -I"$(hdr_dir)/dos"
incl_sys_linux  = -I"$(hdr_dir)/linux"
incl_sys_nt     = -I"$(w32api_dir)/nt"
incl_sys_os2286 = -I"$(os2api_dir)/os2286/h"
incl_sys_os2386 = -I"$(os2api_dir)/os2386/h"
incl_sys_win    = -I"$(w16api_dir)/wini86"
!else
incl_sys_dos    = -I"$(watcom_root)/h"
incl_sys_linux  = -I"$(watcom_root)/lh"
incl_sys_nt     = -I"$(watcom_root)/h/nt"
incl_sys_os2286 = -I"$(watcom_root)/h/os21x"
incl_sys_os2386 = -I"$(watcom_root)/h/os2"
incl_sys_win    = -I"$(watcom_root)/h/win"
!endif

targ_bld_cxx_pls386 = -bt=dos $(incl_sys_dos)
targ_bld_cxx_d4g386 = -bt=dos $(incl_sys_dos)
targ_bld_cxx_cw386  = -bt=dos $(incl_sys_dos)
targ_bld_cxx_tnt386 = -bt=nt $(incl_sys_dos)
targ_bld_cxx_os2386 = -bt=os2 $(incl_sys_dos) $(incl_sys_os2386)
targ_bld_cxx_wnt386 = -bt=nt $(incl_sys_dos) $(incl_sys_nt)
targ_bld_cxx_lnx386 = -bt=linux $(incl_sys_linux)
!ifdef __NT386__
targ_bld_cxx_wnti86 = -bt=dos $(incl_sys_dos)
!else
targ_bld_cxx_wnti86 = -bt=nt $(incl_sys_dos)
!endif
targ_bld_cxx_dosi86 = -bt=dos $(incl_sys_dos)
targ_bld_cxx_os2i86 = -bt=os2 $(incl_sys_dos) $(incl_sys_os2286)
# these will be empty
targ_bld_cxx_wntaxp = -si $(incl_sys_dos) $(incl_sys_nt)
targ_bld_cxx_dosaxp = $(incl_sys_dos)
targ_bld_cxx_os2axp = $(incl_sys_dos)
targ_bld_cxx_lnxppc = $(incl_sys_linux)
targ_bld_cxx_lnxmps = $(incl_sys_linux)

#
# targ_bld_wfc  build options (e.g., something like -bt=dos)
#
targ_bld_wfc_pls386 = #-bt=dos
targ_bld_wfc_d4g386 = #-bt=dos
targ_bld_wfc_cw386  = #-bt=dos
targ_bld_wfc_tnt386 = #-bt=nt
targ_bld_wfc_os2386 = #-bt=os2
targ_bld_wfc_wnt386 = #-bt=nt
targ_bld_wfc_lnx386 = #-bt=linux
targ_bld_wfc_wnti86 = #-bt=nt
targ_bld_wfc_dosi86 = #-bt=dos
targ_bld_wfc_os2i86 = #-bt=os2
#
# these will be empty
#
targ_bld_wfc_wntaxp = -si
targ_bld_wfc_dosaxp =
targ_bld_wfc_os2axp =
targ_bld_wfc_lnxppc =
targ_bld_wfc_lnxmps =

#
# targ_ldb      linker debug directive (e.g., DEBUG all)
#
targ_ldb_pls386 = debug all
targ_ldb_d4g386 = debug all
targ_ldb_cw386  = debug all
targ_ldb_tnt386 = debug all
targ_ldb_os2386 = debug all
targ_ldb_wnt386 = debug all
targ_ldb_lnx386 = debug all
targ_ldb_wnti86 = debug all
targ_ldb_dosi86 = debug all
targ_ldb_os2i86 = debug all
targ_ldb_wntaxp = debug codeview
targ_ldb_dosaxp = debug codeview
targ_ldb_os2axp = debug codeview
targ_ldb_lnxppc = debug all
targ_ldb_lnxmps = debug all

ldebug_386 = $(targ_ldb_$(targ_env_386))
ldebug_axp = $(targ_ldb_$(targ_env_axp))
ldebug_i86 = $(targ_ldb_$(targ_env_i86))
ldebug_mps = $(targ_ldb_$(targ_env_mps))
ldebug_ppc = $(targ_ldb_$(targ_env_ppc))

#
# targ_lnk      linker directives (e.g., system pharlap option offset=64k)
#
targ_lnk_pls386 = system pharlap option offset=64k
targ_lnk_d4g386 = system dos4g
targ_lnk_cw386  = system causeway
targ_lnk_tnt386 = system nt option offset=64k
targ_lnk_os2386 = system os2v2 option offset=64k
targ_lnk_wnt386 = system nt option offset=64k
targ_lnk_lnx386 = system linux
!ifdef __NT386__
targ_lnk_wnti86 = system dos option stack=3k
!else
targ_lnk_wnti86 = system os2 pmc
!endif
targ_lnk_dosi86 = system dos option stack=3k
targ_lnk_os2i86 = system os2 pmc
targ_lnk_wntaxp = system ntaxp
targ_lnk_dosaxp = system ntaxp
targ_lnk_os2axp = system ntaxp
targ_lnk_lnxppc = system linuxppc
targ_lnk_lnxmps = system linuxmips

!ifndef noisy
was_any = -zq
wcc_any = -zq
wpp_any = -zq
wfc_any = -Quiet
lnk_any = option noundefsok, map, quiet
lib_any = -q
!else
lnk_any = option noundefsok, map
!endif

lnk_386 = $(targ_lnk_$(targ_env_386)) $(lnk_any)
lnk_axp = $(targ_lnk_$(targ_env_axp)) $(lnk_any)
lnk_i86 = $(targ_lnk_$(targ_env_i86)) $(lnk_any)
lnk_mps = $(targ_lnk_$(targ_env_mps)) $(lnk_any)
lnk_ppc = $(targ_lnk_$(targ_env_ppc)) $(lnk_any)

wasm_386 = $(comp_wasm_386) $(was_any) $(targ_bld_was_$(targ_env_386))
wasm_i86 = $(comp_wasm_i86) $(was_any) $(targ_bld_was_$(targ_env_i86))
wasm_axp = $(comp_wasm_axp) $(was_any) $(targ_bld_was_$(targ_env_axp))
wasm_ppc = $(comp_wasm_ppc) $(was_any) $(targ_bld_was_$(targ_env_ppc))
wasm_mps = $(comp_wasm_mps) $(was_any) $(targ_bld_was_$(targ_env_mps))

wcc_386 = $(comp_wcc_386) $(wcc_any) $(targ_bld_cxx_$(targ_env_386)) $(targ_bld_cxx_include_$(targ_env_386))
wcc_i86 = $(comp_wcc_i86) $(wcc_any) $(targ_bld_cxx_$(targ_env_i86)) $(targ_bld_cxx_include_$(targ_env_i86))
wcc_axp = $(comp_wcc_axp) $(wcc_any) $(targ_bld_cxx_$(targ_env_axp)) $(targ_bld_cxx_include_$(targ_env_axp))
wcc_ppc = $(comp_wcc_ppc) $(wcc_any) $(targ_bld_cxx_$(targ_env_ppc)) $(targ_bld_cxx_include_$(targ_env_ppc))
wcc_mps = $(comp_wcc_mps) $(wcc_any) $(targ_bld_cxx_$(targ_env_mps)) $(targ_bld_cxx_include_$(targ_env_mps))

wpp_386 = $(comp_wpp_386) $(wpp_any) $(targ_bld_cxx_$(targ_env_386)) $(targ_bld_cxx_include_$(targ_env_386))
wpp_i86 = $(comp_wpp_i86) $(wpp_any) $(targ_bld_cxx_$(targ_env_i86)) $(targ_bld_cxx_include_$(targ_env_i86))
wpp_axp = $(comp_wpp_axp) $(wpp_any) $(targ_bld_cxx_$(targ_env_axp)) $(targ_bld_cxx_include_$(targ_env_axp))
wpp_ppc = $(comp_wpp_ppc) $(wpp_any) $(targ_bld_cxx_$(targ_env_ppc)) $(targ_bld_cxx_include_$(targ_env_ppc))
wpp_mps = $(comp_wpp_mps) $(wpp_any) $(targ_bld_cxx_$(targ_env_mps)) $(targ_bld_cxx_include_$(targ_env_mps))

wfc_386 = $(comp_wfc_386) $(wfc_any) $(targ_bld_wfc_$(targ_env_386))
wfc_i86 = $(comp_wfc_i86) $(wfc_any) $(targ_bld_wfc_$(targ_env_i86))
wfc_axp = $(comp_wfc_axp) $(wfc_any) $(targ_bld_wfc_$(targ_env_axp))
wfc_ppc = $(comp_wfc_ppc) $(wfc_any) $(targ_bld_wfc_$(targ_env_ppc))
wfc_mps = $(comp_wfc_mps) $(wfc_any) $(targ_bld_wfc_$(targ_env_mps))

librarian = $(wlib_any) $(lib_any) -n -b

start : .SYMBOLIC .EXPLICIT
!ifdef dll_loaded
!  ifdef wasmtest_name
!  else ifdef ctest_name
     @echo using !loaddll $(dll_wcc_$(arch))
!  else ifdef ftest_name
     @echo using !loaddll $(dll_wfc_$(arch))
!  else ifdef plustest_name
     @echo using !loaddll $(dll_wpp_$(arch))
!  else ifdef mathtest_name
     @echo using !loaddll $(dll_wcc_$(arch))
!  endif
!endif
    @echo ==== $(%__CTIME__) $(%__CWD__) ====
    @%append $(log_file) ==== $(%__CTIME__) $(%__CWD__) ====
    %append $(log_file) TEST $(arch)/$(alt_error)

test.lnk : $(__MAKEFILES__) .EXPLICIT
    %create $@
    @%append $@ $(targ_ldb_$(targ_env_$(arch)))
    @%append $@ $(targ_lnk_$(targ_env_$(arch)))
    @%append $@ $(lnk_any)
    @%append $@ $(stack_$(arch))

.c.obj:
    @set ERROR_MSG=failure to compile $^&
    @%make set_path_wcc
    $(wcc_$(arch)) $[@ $(test_flags) $(test_flags_$(arch)) $(opt_$^*) $(opt_EH_$(EH_$^*)) -fo=.obj
    @%make set_old_path

.cpp.obj:
    @set ERROR_MSG=failure to compile $^@
    @%make set_path_wpp
    $(wpp_$(arch)) $[@ $(test_flags) $(test_flags_$(arch)) $(opt_$^*) $(opt_EH_$(EH_$^*)) -fo=.obj
    @%make set_old_path

.gc.obj:
    @set ERROR_MSG=failure to compile $^&
    @%make set_path_wcc
    $(wcc_$(arch)) $[@ $(test_flags_$(arch)) $(opt_$^*) -fo=.obj
    @%make set_old_path
    @%append $(%ERROR_FILE) PASS compiling $^&

.gcp.obj:
    @set ERROR_MSG=failure to compile $^&
    @%make set_path_wpp
    $(wpp_$(arch)) $[@ $(test_flags_$(arch)) $(opt_$^*) -fo=.obj
    @%make set_old_path
    @%append $(%ERROR_FILE) PASS compiling $^&

.for.obj:
    @set ERROR_MSG=failure to compile $^@
    @%make set_path_wfc
    $(wfc_$(arch)) $[@ $(fflags_$(arch)) $(opt_$^*) -FO=.obj
    @%make set_old_path

.asm.obj:
    @set ERROR_MSG=failure to compile $^@
    %write xxxxxxxx.tmp  -zld -wx -nm=$[@ $(asm_flags_$^&) $[@ -fr=$^&.out -fo=$@
    -$(wasm_$(arch)) @xxxxxxxx.tmp
    @%create tmp.tmp
    @if not exist $^&.out @%create $^&.out
    @set CHK_CHECK=diff -i -b $^&.out tmp.tmp
    @if exist $^&.chk @set CHK_CHECK=diff -i -b $^&.out $^&.chk
    $(%CHK_CHECK)
    @%append $(%ERROR_FILE) PASS compiling $[@
    @if not exist $@ @%create $@

# Rule for compiling via preprocessor
.p.obj:
    @set ERROR_MSG=failure to preprocess $^@
    @%make set_path_wcc
    $(wcc_$(arch)) $[@ $(test_flags_$(arch)) $(opt_$^*) $(opt_EH_$(EH_$^*)) -pl -fo=.i
    @set ERROR_MSG=failure to compile $[&.i
    $(wcc_$(arch)) $[&.i $(test_flags_$(arch)) $(opt_$^*) $(opt_EH_$(EH_$^*)) -fo=.obj
    @%make set_old_path

.obj.dis:
    @set ERROR_MSG=failure to decode $[@
    @$(buildtest_prefix)wdis -l=$@ -a -ff $[@
    @set ESM_CHECK=%null
    @if exist $^&.esm @set ESM_CHECK=diff -i -b $^&.dis $^&.esm
    $(%ESM_CHECK)
    @$(buildtest_prefix)dmpobj -q -rec=FIXUPP $[@ | sed -f $(wasmtest_dir)/fixlst1.sed >$^&.lst
    @set EMP_CHECK=@%null
    @if exist $^&.emp @set EMP_CHECK=diff -i -b $^&.lst $^&.emp
    $(%EMP_CHECK)
    @%append $(%ERROR_FILE) PASS decoding $[@

.obj.dib:
    @set ERROR_MSG=failure to decode $[@
    @$(buildtest_prefix)wdis -l=$@ -ff $[@
    @set ESM_CHECK=%null
    @if exist $^&.esm @set ESM_CHECK=diff -i -b $^&.dib $^&.esm
    $(%ESM_CHECK)
    @$(buildtest_prefix)dmpobj -q -rec=FIXUPP $[@ | sed -f $(wasmtest_dir)/fixlst1.sed >$^&.lst
    @set EMP_CHECK=@%null
    @if exist $^&.emp @set EMP_CHECK=diff -i -b $^&.lst $^&.emp
    $(%EMP_CHECK)
    @%append $(%ERROR_FILE) PASS decoding $[@

.obj.dum: .SYMBOLIC
    @set ERROR_MSG=failure to decode $[@
    @%append $(%ERROR_FILE) PASS decoding $[@

.obj.ls1:
    @set ERROR_MSG=failure to decode $[@
    $(buildtest_prefix)wdis -a $[@ | sed -f $(wasmtest_dir)/fixlst2.sed | awk -f $(wasmtest_dir)/fixlst3.awk -v OUTFILE=$^.
    @set CHK_CHECK=diff -i -b $@ $(wasmtest_dir)/inline/$^&.asm
    @if exist $(wasmtest_dir)/inline/$^&.chk @set CHK_CHECK=diff -i -b $@ $(wasmtest_dir)/inline/$^&.chk
    $(%CHK_CHECK)
    @%append $(%ERROR_FILE) PASS decoding $[@

.obj.lst:
    @set ERROR_MSG=failure to decode $[@
    @set ESM_CHECK=@%null
    @if exist $(wasmtest_dir)/inline/$^&.esm @set ESM_CHECK=diff -i -b $^&.dis $(wasmtest_dir)/inline/$^&.esm
    -$(buildtest_prefix)wdis -a $[@ | sed -f $(wasmtest_dir)/fixlst2.sed $(extra_sed_$^*) >$^&.dis
    $(%ESM_CHECK)
    @set EMP_CHECK=@%null
    @if exist $(wasmtest_dir)/inline/$^&.emp @set EMP_CHECK=diff -i -b $@ $(wasmtest_dir)/inline/$^&.emp
    -$(buildtest_prefix)dmpobj -q -rec=FIXUPP $[@ | sed -f $(wasmtest_dir)/fixlst1.sed >$@
    $(%EMP_CHECK)
    @%append $(%ERROR_FILE) PASS decoding $[@

.c.err:
!ifdef plustest_name
    @%make set_path_wpp
    -$(wpp_$(arch)) $[@ $(diagnose_opts) -na $(opt_$^&) -fo=.obj
!else
    @%make set_path_wcc
    -$(wcc_$(arch)) $< $(diagnose_opts) $(opt_$^&) -fo=.obj
!endif
    @%make set_old_path
    @if not exist $@ %write $@ I did not generate errors for $^&

.c.ser:
!ifdef plustest_name
    @%make set_path_wpp
    -$(wpp_$(arch)) $[@ $(diagnose_opts) -na $(opt_$^&) $(archdep_opts) -fo=.obj
!else
    @%make set_path_wcc
    -$(wcc_$(arch)) $< $(diagnose_opts) $(opt_$^&) $(archdep_opts) -fo=.obj
!endif
    @%make set_old_path
    @if not exist $@ %write $@ I did not generate errors for $^&

.obj.$(exe):
    @set ERROR_MSG=*** failure to link $^&
    @%make set_path_wlink
    $(linker) @test.lnk $(opt_link) $(opt_link_$^*) NAME $^@ FILE {$<}
    @%append $(%ERROR_FILE) PASS compiling $^&
    @set ERROR_MSG=*** failure to execute $^&
    @%make set_path_rtdll
!ifdef ftest_name
    $(run) $(exec_prefix)$@ $(extra_run_$^*) >$*.out $(stderr_check_$(arch))
!else ifeq plustest_name except
    -$(run) $(exec_prefix)$@ $(extra_run_$^*) >>exec.out $(stderr_check_$(arch))
!else
    $(run) $(exec_prefix)$@ $(extra_run_$^*) >>exec.out $(stderr_check_$(arch))
!endif
    @%make set_old_path
    @%append $(%ERROR_FILE) PASS executing $^&
!ifdef ftest_name
    diff $*.out expected/$*.chk >> exec.out
!endif

./chk_exec.exe : $(watcom_dir)/c/chk_exec.c .EXPLICIT
    $(bld_cl) $(bld_cl_opts) $(bld_extra_defines) $<

./chktest.exe : $(watcom_dir)/c/chktest.c .EXPLICIT
    $(bld_cl) $(bld_cl_opts) $<

./catfile.exe: $(watcom_dir)/c/catfile.c .EXPLICIT
    $(bld_cl) $(bld_cl_opts) $<

set_path_wcc : .PROCEDURE .EXPLICIT
!ifdef path_wcc
#    @echo Set PATH for wcc DLL
    @set PATH=$(path_wcc);$(old_path)
!endif

set_path_wpp : .PROCEDURE .EXPLICIT
!ifdef path_wpp
#    @echo Set PATH for wpp DLL
    @set PATH=$(path_wpp);$(old_path)
!endif

set_path_wfc : .PROCEDURE .EXPLICIT
!ifdef path_wfc
#    @echo Set PATH for wfc DLL
    @set PATH=$(path_wfc);$(old_path)
!endif

set_path_wlib : .PROCEDURE .EXPLICIT
!ifdef path_wlib
#    @echo Set PATH for wlib DLL
    @set PATH=$(path_wlib);$(old_path)
!endif

set_path_wlink : .PROCEDURE .EXPLICIT
!ifdef buildtest
    @set WLINK_LNK=bwlink.lnk
!endif
!ifdef path_wlink
#    @echo Set PATH for wlink DLL
    @set PATH=$(path_wlink);$(path_wlib);$(old_path)
!endif

set_path_rtdll : .PROCEDURE .EXPLICIT
!ifdef path_rtdll
#    @echo Set PATH for RTDLL
    @set PATH=$(path_rtdll);$(old_path)
!endif

set_old_path : .PROCEDURE .EXPLICIT
!ifdef old_path
#    @echo Restore old PATH
    @set PATH=$(old_path)
!endif

common_clean : .PROCEDURE .EXPLICIT
    -rm -f *.?bj *.err *.lnk *.exe *.exp *.out *.sym *.dmp *.map
    -rm -f *.lst *.tmp *.lbc *.def *.dll *.pdb *.pch *.lib *.res
