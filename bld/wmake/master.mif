#
#   The master file for creating wmake.
#
##############################################################################

proj_name   = wmake
xname       = wmk

!ifndef wmake_autodepends
wmake_autodepends = .AUTODEPEND
!endif

# DOS code will not fit in 64k with /d2
#!ifeq host_os dos
#!ifeq host_cpu i86
#wmake_release = 1
#!endif
#!endif

wmake_trmem = 1

!include idedlls.mif
!include cproj.mif
!include defrule.mif
!include deftarg.mif

!include $(orl_dir)/client.mif

!include wres.mif

!include trmem.mif

!include ../wmkobjs.mif                     #   get our objs macro

.h      : ../h
.h      : $(watcom_dir)/h
.h      : $(trmem_dir)
.c      : ../c
.c      : $(watcom_dir)/c
.c      : $(trmem_dir)
.inc    : .
.inc    : ../h

echo    = echo

# Compiler Flags

inc_dirs = -I. -I"$(wmake_dir)/h" -I"$(orl_dir)/h"

extra_cpp_flags =
!ifdef DLLS_IMPLEMENTED
extra_cpp_flags += -DDLLS_IMPLEMENTED
!endif
!ifdef cachestat
extra_cpp_flags += -DCACHE_STATS
!endif
!ifdef wmake_causeway
extra_cpp_flags_dos_386 = -DCAUSEWAY
!endif

extra_c_flags_i86 = -zt32

extra_c_flags_trmem = $(trmem_cflags)
extra_c_flags_memory = $(trmem_cover_cflags)

##############################################################################

# LINKER FLAGS

extra_l_flags = opt statics sort

# large stacks are necessary for !loaddll support
# os2 seems to crash with 128k stack and wccd386 - mjc
extra_l_flags_os2 = opt stack=96k
extra_l_flags_qnx = opt stack=20k
!ifdef LARGE
extra_l_flags_dos_i86 = opt stack=16k
!else ifdef COMPACT
extra_l_flags_dos_i86 = opt stack=16k
!else
extra_l_flags_dos_i86 = opt stack=4k
!endif
!ifdef wmake_causeway
extra_l_flags_dos_386 = opt stack=96k lib cwdll.lib
!else
extra_l_flags_dos_386 = opt stack=4k
!endif
extra_l_flags_dos = $(extra_l_flags_dos_$(host_cpu))

!ifeq host_cpu i86
libs = $(wres_lib)
!else
libs = $(wres_lib) $(orl_lib)
!endif

# systems where version resources must be added to .EXE
version_res_exe_nt_386 = exever.res
version_res_exe_nt_x64 = exever.res

!include verrc.mif

$(xname).exe :: usageend.gh $(objs) $(libs) wmake.res $(version_res_exe_$(host_os)_$(host_cpu)) $(__MAKEFILES__)
!ifndef __WATCOM__
        $(cl) $(clflags) $(objs) $(libs) $(ldflags)
!else
        $(linker) name $^@ $(lflags) file {$(objs)} lib {$(libs)}
!endif
        @%make bind_version_res_exe
        $(wstrip) -q -a -r $(xname).exe . wmake.res

wmake.res : ../h/wmake.rc mrcmsg.h usage.gh usagej.gh
        $(rc_aui) $[@ -fo=$@

usage.gh : ../h/usage.sp
        *wsplice -kIS_RC -kENGLISH -f "pick((MSG_USAGE_BASE+%$#%+), \"%s\", \"\")" -o "%n%n%n%n" $< $@

usagej.gh : ../h/usage.sp
        *wsplice -kIS_RC -kJAPANESE -f "pick((MSG_USAGE_BASE+%$#%+), \"\", \"%s\")" -o "%n%n%n%n" $< $@

usageend.gh : usage.gh
        *wsplice -f "%+" -o "$#define MSG_USAGE_LAST (MSG_USAGE_BASE+%$#)%n" $< $@

# usage.h : ..\h\usage.sp
# I want the usage message codes to be generated on the fly, and also
# padded by ten ( so that versions in different languages will still
# compile ).  Fortunately, by simply defining more constants, we don't
# make the final program any larger.  Oh well - the end justifying the
# means, I suppose. CSK
#       *wsplice -k$(OS) -kENGLISH -f "%s"..\h\usage.sp -o "%n%n%n%n%n%n%n%n%n%n" usage.h
#       *wsplice -f "#define USAGE_LN_%$# (MSG_USAGE_BASE+%$#)%+" usage.h usage.h
#       *wsplice -f "%s%+"usage.h -o "$#define MSG_USAGE_LAST (MSG_USAGE_BASE+%$#)" usage.h

##############################################################################
# special case targets

isarray.gh : ./cretype.exe
    $< > $@

./cretype.exe : cretype.c
    $(bld_cl) $[@ $(bld_clflags) $(bld_ldflags)

# dependencies on .h files
mglob.obj : isarray.gh .AUTODEPEND


##############################################################################
# symbolic targets

# print a list of unreferenced messages
chkmsg :
    sed -f ../msgdef.sed ../h/msg.h | sort -u >chkmsg.1
    *awk -f ../msgref.awk -v OUTFILE=chkmsg.2 chkmsg.1
    sed -f chkmsg.2 ../c/*.c | sort -u >chkmsg.3
    comm -3 chkmsg.1 chkmsg.3 | tee chkmsg
    rm chkmsg.?

strip : .symbolic
    $(wstrip) /q wmk.exe wmks.exe >nul
    ls -l *.exe

deps : .symbolic
    cd ../c
    ../support/mmk >../makedeps.mif

do : .symbolic
    wmake -h -n | sed -f ../mkdo.sed >do.bat

test : $(xname).exe .always .symbolic
curr_dir=$+$(%CWD)$-
    cd ../regress
!ifdef __UNIX__
    -./test.sh $(curr_dir)/$(xname).exe
!else
    -test $(curr_dir)\$(xname).exe
!endif
    cd $(curr_dir)
