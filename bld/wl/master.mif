# the linker master make file
#
# This depends on the following projects:
# orl, plusplus, dwarf, watcom, and trmem

proj_name = wlink

# Base DLL name needs to be 8 chars or less on OS/2, argh! Additionally,
# internal module name may be required to match file name on some platforms.
!ifeq bootstrap 1
exename     = bwlink
dllname     = bwlinkd
!else
exename     = wlink
dllname     = wlinkd
!endif

!ifndef wlink_autodepends
wlink_autodepends = .AUTODEPEND
!endif

additional_cleanup = usage.u

# get rid of the -zc
suppress_zc = 1

!ifneq bootstrap 1
!include idedlls.mif
!endif
!include cproj.mif
!include defrule.mif
!include dllrule.mif
!include deftarg.mif
!include dllbase.mif

!include $(orl_dir)/client.mif
!include $(dwarfw_dir)/client.mif

!include wres.mif

!include trmem.mif

!include ../wlobjs.mif

inc_dirs = -I. -I"../h" $(dwarfw_inc_dirs) -I"$(orl_dir)/h" -I"$(wrc_dir)/h" $(wres_inc_dirs) -I"$(lib_misc_dir)/h" -I"$(watcom_dir)/c"

.c: ../c;$(watcom_dir)/c;$(wrc_dir)/c;$(lib_misc_dir)/c;$(trmem_dir)

################
# c flags stuff

extra_cpp_flags = -D__WLINK__ $(debug_cpp_flags)
!ifdef DLLS_IMPLEMENTED
extra_cpp_flags += -DDLLS_IMPLEMENTED
!endif
!ifeq use_virtmem 1
extra_cpp_flags += -DUSE_VIRTMEM
!endif
!ifndef wlink_dll
extra_cpp_flags += -DIDE_PGM
!endif
!ifdef wlink_trmem
extra_cpp_flags += -DTRMEM
!endif

extra_c_flags_idedrv     = -DCHAIN_CALLBACK
extra_c_flags_ideentry   = -DCHAIN_CALLBACK
extra_c_flags_maindrv    = -DDLL_NAME=$(dllname)
extra_c_flags_rcstr      = -DINSIDE_WLINK
extra_c_flags_exerespe   = -DINSIDE_WLINK
extra_c_flags_sharedio   = -DINSIDE_WLINK
extra_c_flags_stidedrv   = -DSTATIC_LINKAGE
extra_c_flags_trmem      = $(trmem_cflags)
extra_c_flags_mem        = $(trmem_cover_cflags)

#####################
# linker .EXE options

extra_link_res_qnx = usage.u

extra_l_flags_qnx = op res=$(extra_link_res_qnx), st=24k, off=32k

#####################
# linker .DLL options

extra_l_flags_dll     = option implib $($(proj_name)_dllbase_$(host_os)_$(host_cpu))
extra_l_flags_dll_nt  = initinstance terminstance op modname='$(dllname).dll'
extra_l_flags_dll_os2 = initinstance terminstance op modname='$(dllname)'

!ifdef no_orl
# do not link against ORL
orl_lib = 
!endif

xlibs = $(wres_lib) $(dwarfw_lib) $(orl_lib)

###########
# rc stuff

# systems where version resources must be added to .DLL
version_res_dll_nt_386 = version.res
version_res_dll_nt_x64 = version.res

# systems where version resources must be added to .EXE
version_res_exe_nt_386 = exever.res
version_res_exe_nt_x64 = exever.res

verrc_exe = $(exename)
verrc_dll = $(dllname)
!include verrc.mif

#################
# explicit rules

!ifdef wlink_dll

$(exename).exe : $(extra_link_res_$(host_os)) $(dllname).dll $(comp_objs_drv) $(version_res_exe_$(host_os)_$(host_cpu))
!ifndef __WATCOM__
    $(cl) $(clflags) $(comp_objs_drv) $(dllname).lib $(ldflags)
!else
    @%write drv.lnk $(lflags)
    @for %i in ($(comp_objs_drv)) do @%append drv.lnk file %i
    @%append drv.lnk lib $(dllname).lib
    $(linker) name $@ @drv.lnk
!endif
    @%make bind_version_res_exe

!else

$(exename).exe : $(extra_link_res_$(host_os)) wlink.res $(comp_objs_exe) $(xlibs) $(version_res_exe_$(host_os)_$(host_cpu))
!ifndef __WATCOM__
    $(cl) $(clflags) $(comp_objs_exe) $(xlibs) $(ldflags)
!else
    @%write exe.lnk $(lflags)
    @for %i in ($(comp_objs_exe)) do @%append exe.lnk file %i
    @for %i in ($(xlibs)) do @%append exe.lnk lib %i
    $(linker) name $@ @exe.lnk
!endif
    @%make bind_version_res_exe
    $(wstrip) -q -a -r $@ . wlink.res

!endif

$(dllname).dll : wlink.res $(comp_objs_dll) $(xlibs) $(version_res_dll_$(host_os)_$(host_cpu))
!ifndef __WATCOM__
    $(cl) $(clflags_dll) $(comp_objs_dll) $(xlibs) $(ldflags)
!else
    @%write dll.lnk $(lflags_dll)
    @for %i in ($(comp_objs_dll)) do @%append dll.lnk file %i
    @for %i in ($(xlibs)) do @%append dll.lnk lib %i
    $(linker) name $@ @dll.lnk
!endif
    @%make bind_version_res_dll
    $(wstrip) -q -a -r $@ . wlink.res

#################
# auxiliary rules

wlink.res : rcmsg.gh ../h/wlink.msg ../h/lnkerror.rc ../h/wlnkmsg.h ../h/lnkerror.msg ../h/wlink.rc
    $(rc_aui) -I"$(wrc_dir)/h" $]@ -fo=$^@

rcmsg.gh : wrcmsg.gh
    *awk -v rcbase=800 -f $(build_dir)/msgtoh.awk -v OUTFILE=$^. $[@

wrcmsg.gh : $(wrc_dir)/h/rc.msg
    $(cpp) $(rc_aui_flags) -o$@ $[@

usage.u : ../h/usage.sp
    *wsplice -u $< $@
